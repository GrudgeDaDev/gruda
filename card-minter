<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chain Nexus Codex</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background: #111111 url('https://i.imgur.com/KzcmBtg.png') no-repeat center center fixed;
            background-size: cover;
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .bg-overlay {
            background: rgba(0, 0, 0, 0.85);
            position: fixed;
            inset: 0;
            z-index: -1;
        }

        #codex-ui {
            position: relative; /* Context for absolute positioning of card preview */
            width: 95%;
            max-width: 1800px;
            height: 95vh;
            background: url('https://i.imgur.com/amFdI1I.jpeg') no-repeat center center;
            background-size: cover;
            border: 12px solid #4A2F1A;
            border-radius: 25px;
            box-shadow: 0 0 70px rgba(0, 0, 0, 0.826);
            display: flex;
            flex-direction: column;
            padding: 2.5rem;
            overflow: hidden;
        }

        header {
            background: rgba(0, 0, 0, 0.95);
            padding: 1.5rem 3rem;
            border-bottom: 6px solid #D4A017;
            box-shadow: 0 0 30px #D4A017;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: absolute;
            top: 0;
            width: calc(100% - 5rem);
            z-index: 1000;
            border-radius: 12px 12px 0 0;
        }

        .tabs {
            display: flex;
            justify-content: center;
            margin-top: 7rem;
            gap: 1.5rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.85);
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(212, 160, 23, 0.6);
        }

        .tab-button {
            padding: 1.2rem 2.5rem;
            background: rgba(74, 47, 26, 0.95);
            border: 5px solid #D4A017;
            border-radius: 12px 12px 0 0;
            color: #fff;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-shadow: 0 0 6px #D4A017;
            font-size: 1.2rem;
        }

        .tab-button:hover,
        .tab-button.active {
            background: #D4A017;
            color: #000;
            transform: translateY(-5px);
            box-shadow: 0 0 25px #D4A017;
        }

        .tab-content {
            display: none;
            flex: 1;
            padding: 2.5rem;
            background: rgba(66, 57, 23, 0.762);
            border-radius: 20px;
            overflow-y: auto;
            box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.9),
            inset 1px 0 2px rgba(0, 0, 0, 0.971);
        }

        .tab-content.active {
            display: flex;
            flex-direction: column;
        }

        .sub-tabs {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 2rem;
            justify-content: center;
        }

        .sub-tab-button {
            padding: 0.9rem 1.8rem;
            background: rgba(74, 47, 26, 0.9);
            border: 4px solid #D4A017;
            border-radius: 8px;
            color: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
            text-shadow: 0 0 4px #D4A017;
            font-size: 1rem;
        }

        .sub-tab-button:hover,
        .sub-tab-button.active {
            background: #D4A017;
            color: #000;
            transform: scale(1.1);
            box-shadow: 0 0 18px #D4A017;
        }

        .card-display {
            width: 150px;
            height: 225px;
            background-size: cover;
            border: 5px solid;
            border-radius: 12px;
            box-shadow: 0 0 15px rgba(212, 160, 23, 0.8);
            position: relative;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .card-display::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://i.imgur.com/starry-night.jpg') repeat-x;
            animation: nightSky 10s linear infinite;
            opacity: 0.5;
            z-index: -1;
        }

        .card-display:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px #D4A017;
            background:color-mix(in hwb shorter hue, gold percentage, rgb(122, 221, 73) percentage)
        }

        .card-display.selected {
            border-color: #00ff00;
            box-shadow: 0 0 25px #00ff00;
        }

        .card-display.not-owned {
            filter: grayscale(100%);
        }

        .card-display.hue-rotate-0 {
            filter: hue-rotate(0deg);
        }

        .card-display.hue-rotate-90 {
            filter: hue-rotate(90deg);
        }

        .card-display.hue-rotate-180 {
            filter: hue-rotate(180deg);
        }

        .card-display.hue-rotate-270 {
            filter: hue-rotate(270deg);
        }

        .card-display.hue-rotate-300 {
            filter: hue-rotate(300deg);
        }

        .card-display.spell {
            border-color: #0000FF; /* Blue for spells */
        }

        .card-display.minion-normal {
            border-color: #00FF00; /* Green for normal minions */
        }

        .card-display.minion-taunt {
            border-color: #0000FF; /* Blue for minions with taunt */
        }

        .card-display.minion-effect {
            border-color: #FF0000; /* Red for minions with effects */
        }

        .card-info {
            position: absolute;
            bottom: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.249);
            padding: 10px;
            font-size: 13px;
            opacity: 0.9;
            transition: opacity 0.3s ease;
            background:color-mix(in hwb shorter hue, gold percentage, rgb(122, 221, 73) percentage)
        }

        .card-display:hover .card-info {
            opacity: 1;
        }

        .card-name {
            font-size: 15px;
            font-weight: bold;
            color: #D4A017;
            text-align: center;
            text-shadow: 0 0 6px #D4A017;
        }

        .stats {
            color: #00ff00;
            font-size: 12px;
            text-shadow: 0 0 4px #00ff00;
        }

        .description {
            color: #ADD8E6;
            font-style: italic;
            font-size: 11px;
            text-shadow: 0 0 3px #ADD8E6;
        }

        .cost {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 102, 204, 0.9);
            padding: 8px 12px;
            border-radius: 50%;
            color: #fff;
            font-weight: bold;
            font-size: 14px;
            text-shadow: 0 0 10px #D4A017;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .season0-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 30px;
            height: 15px;
            background: url('https://i.imgur.com/SRoq392.png') center/cover no-repeat;
            border: 1px solid #D4A017;
            transform: rotate(25deg);
        }

        .price-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.85);
            color: #D4A017;
            font-weight: bold;
            padding: 12px 24px;
            border-radius: 8px;
            text-shadow: 0 0 15px #D4A017, 0 0 30px #D4A017;
            box-shadow: 0 0 25px rgba(212, 160, 23, 0.95);
            font-size: 18px;
            z-index: 10;
        }

        .btn {
            transition: all 0.3s ease;
            border-radius: 8px;
            padding: 0.9rem 1.8rem;
            font-weight: bold;
            font-size: 1rem;
        }

        .btn:hover {
            transform: scale(1.1);
            box-shadow: 0 0 18px #D4A017;
        }

        .input-field {
            background: #333;
            border: 4px solid #D4A017;
            color: #fff;
            padding: 0.9rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .input-field:focus {
            border-color: #ffeb3b;
            box-shadow: 0 0 12px #ffeb3b;
            outline: none;
        }

        .image-upload {
            width: 250px;
            height: 375px;
            border: 5px dashed #D4A017;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            margin: 0 auto;
        }

        .image-upload:hover {
            border-color: #ffeb3b;
            box-shadow: 0 0 18px #ffeb3b;
        }

        .deck-slots {
            display: flex;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .deck-slot {
            padding: 0.9rem 1.8rem;
            background: rgba(74, 47, 26, 0.9);
            border: 4px solid #D4A017;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            font-size: 1rem;
        }

        .deck-slot:hover,
        .deck-slot.active {
            background: #D4A017;
            color: #000;
            transform: scale(1.05);
            box-shadow: 0 0 18px #D4A017;
        }

        .pack-card {
            width: 190px;
            height: 285px;
            position: relative;
            transform-style: preserve-3d;
            animation: spin 5s infinite linear;
            cursor: pointer;
            border: 14px solid transparent;
            border-image: linear-gradient(45deg, #FFD700, #0000FF, #FF0000) 1;
            border-radius: 18px;
            padding: 6px;
            background-clip: content-box;
            box-shadow: 0 0 25px rgba(212, 160, 23, 0.7);
        }

        .pack-front,
        .pack-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 15px;
            box-shadow: 0 0 25px rgba(212, 160, 23, 0.6);
        }

        .pack-front {
            background: url('https://i.imgur.com/f4PzrgN.jpeg') center/cover no-repeat;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .pack-front::after {
            content: '';
            position: absolute;
            width: 90px;
            height: 90px;
            background: url('https://i.imgur.com/rLE4XkO.png') center/cover no-repeat;
        }

        .pack-back {
            transform: rotateY(180deg);
            filter: hue-rotate(90deg) saturate(1.5);
        }

        .pack-back::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://i.imgur.com/starry-night.jpg') repeat-x;
            animation: nightSky 10s linear infinite;
            opacity: 0.5;
            z-index: -1;
        }

        .buy-pack-image {
            width: 380px;
            height: 570px;
            background: url('https://i.imgur.com/f4PzrgN.jpeg') center/cover no-repeat;
            position: relative;
            border: 14px solid transparent;
            border-image: linear-gradient(45deg, #00FF00, #00FF00) 1;
            box-shadow: 0 0 30px #00FF00, 0 0 60px #00FF00;
            border-radius: 18px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            margin: 0 auto;
        }

        .buy-pack-image::after {
            content: '';
            position: absolute;
            width: 180px;
            height: 180px;
            background: url('https://i.imgur.com/rLE4XkO.png') center/cover no-repeat;
        }

        @keyframes spin {
            from {
                transform: rotateY(0deg);
            }
            to {
                transform: rotateY(360deg);
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
                transform: scale(0.8);
            }
        }

        @keyframes nightSky {
            0% {
                background-position: 0 0;
            }
            100% {
                background-position: -120px 0;
            }
        }

        @keyframes hitAnimation {
            0% {
                background: url('https://i.imgur.com/QP9cMm4.png') center/cover no-repeat;
                opacity: 1;
            }
            50% {
                background: url('https://i.imgur.com/pvW3OSi.png') center/cover no-repeat;
                opacity: 0.8;
            }
            100% {
                background: none;
                opacity: 0;
            }
        }

        .hit-effect {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 10;
            animation: hitAnimation 1s ease forwards;
        }

        .carousel {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            flex: 1;
            position: relative;
        }

        .carousel-btn {
            padding: 1rem;
            background: rgba(74, 47, 26, 0.9);
            border: 4px solid #D4A017;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            font-size: 24px;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 0 15px rgba(212, 160, 23, 0.5);
        }

        .carousel-btn:hover {
            background: #D4A017;
            transform: scale(1.15);
            box-shadow: 0 0 25px #D4A017;
        }

        #library-left {
            left: -80px;
        }

        #library-right {
            right: -80px;
        }

        #nexus-left {
            left: -80px;
        }

        #nexus-right {
            right: -80px;
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-gap: 1.5rem 120px; /* Vertical gap: 1.5rem (24px), Horizontal gap: 120px (80% of 150px card width) */
            justify-items: center;
            align-items: center;
            flex: 1;
        }

        .scroll-container {
            overflow-y: auto;
            flex: 1;
            padding: 1.5rem;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .modal-content {
            background: #222;
            padding: 2.5rem;
            border-radius: 20px;
            border: 6px solid #D4A017;
            max-width: 700px;
            width: 90%;
            text-align: center;
            box-shadow: 0 0 25px #D4A017;
        }

        .close {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 28px;
            cursor: pointer;
            color: #D4A017;
            transition: all 0.3s ease;
        }

        .close:hover {
            transform: scale(1.3);
            color: #ffeb3b;
        }

        .avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin-bottom: 2rem;
            border: 4px solid #D4A017;
        }

        .pack-result-card {
            animation: fadeIn 0.5s ease-in;
        }

        .deck-stats {
            margin-top: 1.5rem;
            font-size: 16px;
            color: #ADD8E6;
            text-shadow: 0 0 4px #ADD8E6;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .card-preview {
            position: absolute; /* Relative to #codex-ui */
            width: 300px;
            height: 450px;
            background-size: cover;
            border: 5px solid #D4A017;
            border-radius: 12px;
            box-shadow: 0 0 30px rgba(212, 160, 23, 0.9);
            z-index: 3000;
            display: none;
        }

        .card-preview::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://i.imgur.com/starry-night.jpg') repeat-x;
            animation: nightSky 10s linear infinite;
            opacity: 0.5;
            z-index: -1;
        }

        .card-preview .cost {
            top: 15px;
            right: 15px;
            width: 40px;
            height: 40px;
            font-size: 18px;
        }

        .card-preview .season0-indicator {
            top: 15px;
            left: 15px;
            width: 40px;
            height: 20px;
        }

        .card-preview .card-info {
            font-size: 18px;
            padding: 15px;
        }

        .card-preview .card-name {
            font-size: 20px;
        }

        .card-preview .stats {
            font-size: 16px;
        }

        .card-preview .description {
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="bg-overlay"></div>
    <div id="codex-ui">
        <header>
            <h1 class="text-4xl md:text-5xl font-bold text-[#D4A017] text-shadow-[0_0_12px_#D4A017]">Chain Nexus Codex</h1>
            <div class="flex items-center gap-5" id="user-section">
                <div class="flex items-center gap-4 text-[#D4A017] text-xl md:text-2xl">
                    <img id="user-avatar" class="w-28 h-28 rounded-full hidden" alt="User Avatar">
                    <div id="user-info" class="flex flex-col clickable">
                        <span id="username-display">Not logged in</span>
                        <span id="credits-info">Balance: 0 $GBuX</span>
                    </div>
                </div>
                <button id="login-btn" class="btn bg-[#D4A017] text-black font-bold py-2.5 px-4" onclick="window.location.href='https://www.grudgeplatform.com/login'">Login with Discord</button>
            </div>
        </header>

        <!-- Player Modal -->
        <div id="player-modal" class="modal hidden">
            <div class="modal-content">
                <span id="close-modal" class="close">×</span>
                <img id="modal-avatar" class="avatar" src="" alt="Avatar">
                <h2 id="modal-username" class="text-[#D4A017] text-3xl mb-5"></h2>
                <p>Wins: <span id="modal-wins">0</span></p>
                <p>Losses: <span id="modal-losses">0</span></p>
            </div>
        </div>

        <!-- Deck Modal -->
        <div id="deck-modal" class="modal hidden">
            <div class="modal-content">
                <span id="close-deck-modal" class="close">×</span>
                <h2 id="deck-modal-name" class="text-[#D4A017] text-3xl mb-5"></h2>
                <div id="deck-modal-cards" class="grid grid-cols-4 gap-2.5"></div>
                <div id="deck-stats" class="deck-stats"></div>
            </div>
        </div>

        <!-- Card Preview -->
        <div id="card-preview" class="card-preview">
            <div class="cost"></div>
            <div class="season0-indicator"></div>
            <div class="card-info">
                <div class="card-name"></div>
                <div class="stats"></div>
                <div class="description"></div>
            </div>
        </div>

        <!-- Tabs -->
        <div class="tabs">
            <button class="tab-button active" data-tab="library">Library</button>
            <button class="tab-button" data-tab="create-card">Create Card</button>
            <button class="tab-button" data-tab="deck-builder">Deck Builder</button>
            <button class="tab-button" data-tab="nexus-deck">Nexus Deck</button>
            <button class="tab-button" data-tab="packs">Packs (<span id="pack-count">5</span>)</button>
        </div>

        <!-- Library Tab -->
        <div class="tab-content active" id="library">
            <div class="sub-tabs">
                <button class="sub-tab-button active" data-sub-tab="all">All</button>
                <button class="sub-tab-button" data-sub-tab="owned">Owned</button>
                <button class="sub-tab-button" data-sub-tab="minions">Minions</button>
                <button class="sub-tab-button" data-sub-tab="spells">Spells</button>
                <button class="sub-tab-button" data-sub-tab="mana-low">Mana 0-3</button>
                <button class="sub-tab-button" data-sub-tab="mana-high">Mana 4+</button>
                <input type="text" id="search-bar" class="input-field w-1/3" placeholder="Search cards...">
            </div>
            <div class="carousel">
                <button class="carousel-btn" id="library-left">◄</button>
                <div id="library-cards" class="cards-container"></div>
                <button class="carousel-btn" id="library-right">►</button>
            </div>
        </div>

        <!-- Create Card Tab -->
        <div class="tab-content" id="create-card">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-5 h-full">
                <div class="bg-gray-800 bg-opacity-95 rounded-lg p-5 border-5 border-[#4A2F1A] flex flex-col justify-between items-center h-full">
                    <div id="card-preview-container" class="flex justify-center items-center h-4/5 w-full">
                        <p class="text-gray-400 text-center text-xl">Your card will appear here once minted</p>
                    </div>
                    <div class="flex flex-col gap-2 w-full">
                        <button id="undo-btn" class="btn bg-[#D4A017] text-black font-bold py-1.5 px-3 rounded hidden">Undo</button>
                        <button id="redo-btn" class="btn bg-[#D4A017] text-black font-bold py-1.5 px-3 rounded hidden">Redo</button>
                        <button id="claim-gbux-btn" class="mt-2 w-full bg-[#D4A017] text-black font-bold py-2.5 px-5 rounded btn">Claim 200 $GBuX (Daily)</button>
                    </div>
                </div>
                <div class="bg-gray-800 bg-opacity-95 rounded-lg p-5 border-5 border-[#4A2F1A] flex flex-col justify-between h-full">
                    <h2 class="text-3xl font-bold text-[#D4A017] mb-5 text-center text-shadow-[0_0_12px_#D4A017]">Create Your Card</h2>
                    <div class="space-y-5 flex-1 overflow-y-auto">
                        <div>
                            <label class="block text-gray-300 mb-2 text-xl">Theme
                                <select id="card-theme" class="input-field w-full mt-2">
                                    <option value="default">Default</option>
                                    <option value="dragon">Dragon Scale</option>
                                    <option value="cyber">Cyber Grid</option>
                                </select>
                            </label>
                            <label class="block text-gray-300 mb-2 text-xl">Upload Image <span class="text-red-500">*</span></label>
                            <div class="image-upload" id="image-upload"><span class="text-gray-400 text-xl">Click to upload</span></div>
                            <input type="file" id="card-image" accept="image/*" class="hidden" required>
                        </div>
                        <div>
                            <label class="block text-gray-300 mb-2 text-xl">Card Name <span class="text-red-500">*</span></label>
                            <input type="text" id="card-name" class="input-field w-full" placeholder="Enter card name" required>
                        </div>
                        <div>
                            <label class="block text-gray-300 mb-2 text-xl">Attack <span id="attack-value" class="text-xl">1</span></label>
                            <input type="range" id="attack" min="1" max="10" value="1" class="w-full">
                        </div>
                        <div>
                            <label class="block text-gray-300 mb-2 text-xl">Health <span id="health-value" class="text-xl">1</span></label>
                            <input type="range" id="health" min="1" max="10" value="1" class="w-full">
                        </div>
                        <div>
                            <label class="block text-gray-300 mb-2 text-xl">Special Abilities</label>
                            <div class="grid grid-cols-2 gap-2.5 text-xl">
                                <label class="flex items-center"><input type="checkbox" id="taunt" class="w-6 h-6 mr-2.5"> Taunt</label>
                                <label class="flex items-center"><input type="checkbox" id="healAll" class="w-6 h-6 mr-2.5"> Heal All (1)</label>
                            </div>
                        </div>
                        <div class="flex justify-between items-center mt-auto">
                            <span class="text-gray-300 text-xl">Balance: <span id="gbux-balance">0</span> $GBuX</span>
                            <button id="save-draft-btn" class="btn bg-[#D4A017] text-black font-bold py-2.5 px-5 rounded mr-2">Save Draft</button>
                            <button id="mint-btn" class="btn bg-[#D4A017] text-black font-bold py-2.5 px-5 rounded">Mint Card (10 $GBuX)</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Deck Builder Tab -->
        <div class="tab-content" id="deck-builder">
            <div class="flex flex-col h-full">
                <div class="deck-slots mb-5">
                    <button class="deck-slot" data-slot="1">Deck 1</button>
                    <button class="deck-slot" data-slot="2">Deck 2</button>
                    <button class="deck-slot" data-slot="3">Deck 3</button>
                </div>
                <div class="flex gap-5 flex-1 h-full">
                    <div class="bg-gray-800 bg-opacity-95 rounded-lg p-5 border-5 border-[#4A2F1A] flex-1 flex flex-col">
                        <h2 class="text-3xl font-bold text-[#D4A017] mb-5 text-center text-shadow-[0_0_12px_#D4A017]">Selected Cards (<span id="deck-count">0</span>/20)</h2>
                        <input type="text" id="deck-name" class="input-field mb-5 w-full" placeholder="Deck Name">
                        <div id="selected-cards" class="grid grid-cols-4 gap-2.5 flex-1 overflow-y-auto"></div>
                        <button id="save-deck-btn" class="w-full mt-5 bg-[#D4A017] text-black font-bold py-2.5 px-5 rounded btn">Save Deck</button>
                    </div>
                    <div class="bg-gray-800 bg-opacity-95 rounded-lg p-5 border-5 border-[#4A2F1A] flex-1 flex flex-col">
                        <h2 class="text-3xl font-bold text-[#D4A017] mb-5 text-center text-shadow-[0_0_12px_#D4A017]">Available Cards</h2>
                        <input type="text" id="deck-search" class="input-field mb-5 w-full" placeholder="Search available cards...">
                        <div id="deck-builder-cards" class="scroll-container grid grid-cols-4 gap-2.5 flex-1"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Nexus Deck Tab -->
        <div class="tab-content" id="nexus-deck">
            <h2 class="text-3xl font-bold text-[#D4A017] mb-5 text-center text-shadow-[0_0_12px_#D4A017]">Nexus Deck</h2>
            <div class="flex justify-center gap-5">
                <div id="deck-1-card" class="card-display cursor-pointer"></div>
                <div id="deck-2-card" class="card-display cursor-pointer"></div>
                <div id="deck-3-card" class="card-display cursor-pointer"></div>
            </div>
        </div>

        <!-- Packs Tab -->
        <div class="tab-content" id="packs">
            <h2 class="text-3xl font-bold text-[#D4A017] mb-5 text-center text-shadow-[0_0_12px_#D4A017]">Card Packs</h2>
            <div id="packs-container" class="flex flex-wrap gap-5 justify-center"></div>
            <div id="pack-result" class="mt-5 flex flex-wrap gap-2.5 justify-center"></div>
            <button id="buy-pack-btn" class="mt-5 w-full bg-[#D4A017] text-black font-bold py-2.5 px-5 rounded btn hidden">Buy Pack (500 $GBuX)</button>
            <div id="collection-progress" class="mt-2 text-center text-lg text-[#ADD8E6]"></div>
        </div>

        <button id="play-game-btn" class="absolute bottom-5 right-5 bg-[#D4A017] text-black font-bold py-2.5 px-5 rounded btn text-xl">Play Game</button>
    </div>

    <script>
        const CLIENT_ID = '1342593452793270302';
        const CLIENT_SECRET = 'dvNMm6xErLdFqkLRsLKSMxVdbCtqisEM';
        const REDIRECT_URI = 'https://www.grudgeplatform.com/card-minter';
        const DB_URL = 'https://database.example.com';
        const DB_KEY = 'your-db-key';

        const dbClient = typeof Database !== 'undefined' ? Database.createClient(DB_URL, DB_KEY) : null;

        let user = JSON.parse(localStorage.getItem('user') || '{}');
        let credits = parseInt(localStorage.getItem('credits') || '0');
        let lastClaimTime = parseInt(localStorage.getItem('lastClaimTime') || '0');
        let libraryCards = [];
        let selectedCards = [];
        let nexusDeck = JSON.parse(localStorage.getItem('nexusDeck') || '[]');
        let ownedCards = JSON.parse(localStorage.getItem('ownedCards') || '[]');
        let packs = 5;
        let savedDecks = JSON.parse(localStorage.getItem('savedDecks') || '{"1": [], "2": [], "3": []}');
        let currentDeckSlot = '1';
        let previewTimeout;
        let draftHistory = []; // For undo/redo
        let currentDraftIndex = -1;

        const grudgeCard = { id: 0, name: "Grudge", cost: 3, attack: 2, health: 2, description: "A basic fighter.", backgroundImage: "https://i.imgur.com/3SkE6VG.png", uid: "grudge" };
        const season0 = [
        { id: 1, name: "Night Wraith", cost: 4, attack: 4, health: 3, type: "minion", description: "Strikes from the shadows.", backgroundImage: "https://i.imgur.com/PSpj7sO.png", uid: "season0_1" },
                    { id: 2, name: "Mana Surge", cost: 0, type: "manaStorm", description: "Grants 2 mana this turn.", backgroundImage: "https://i.imgur.com/dU3QrVi.png", uid: "season0_2" },
                    { id: 3, name: "Stoned Ape", cost: 8, attack: 8, health: 8, taunt: true, type: "minion", description: "Unstoppable celestial force.", backgroundImage: "https://i.imgur.com/iWv48Xl.png", uid: "season0_3" },
                    { id: 4, name: "Stealth Drone", cost: 1, attack: 1, health: 1, description: "Quick scouting unit cloaked in shadow.", backgroundImage: "https://i.imgur.com/zMFckYB.png", uid: "season0_4" },
                    { id: 5, name: "Viper Assassin", cost: 3, attack: 4, health: 2, description: "Strikes with venomous precision.", backgroundImage: "https://i.imgur.com/3SkE6VG.png", uid: "season0_5" },
                    { id: 6, name: "Barrier Sentinel", cost: 5, attack: 0, health: 7, taunt: true, description: "Unyielding defense with Taunt.", backgroundImage: "https://i.imgur.com/klAa6aX.png", uid: "season0_6" },
                    { id: 7, name: "Swarm Legion", cost: 3, attack: 3, health: 3, description: "Overruns the enemy in numbers.", backgroundImage: "https://i.imgur.com/Wn84v6I.png", uid: "season0_7" },
                    { id: 8, name: "Quantum Behemoth", cost: 7, attack: 6, health: 4, description: "Devastating energy-infused giant.", backgroundImage: "https://i.imgur.com/Y67jKrU.png", uid: "season0_8" },
                    { id: 9, name: "Arcane Mystic", cost: 2, attack: 2, health: 3, description: "Casts arcane spells with finesse.", backgroundImage: "https://i.imgur.com/Enu1T7Y.png", uid: "season0_9" },
                    { id: 10, name: "Overcharged Titan", cost: 8, attack: 7, health: 6, description: "Overwhelming power surge incarnate.", backgroundImage: "https://i.imgur.com/s0cMpSi.png", uid: "season0_10" },
                    { id: 13, name: "Night Wraith", cost: 4, attack: 4, health: 3, description: "Strikes from the shadows.", backgroundImage: "https://i.imgur.com/PSpj7sO.png", uid: "season0_13" },
                    { id: 14, name: "Crimson Revenant", cost: 4, attack: 4, health: 3, description: "Strikes with fiery intent.", backgroundImage: "https://i.imgur.com/8YIqCl5.png", uid: "season0_14" },
                    { id: 15, name: "Emerald Stalker", cost: 4, attack: 4, health: 3, description: "Strikes with emerald fury.", backgroundImage: "https://i.imgur.com/0XcU175.png", uid: "season0_15" },
                    { id: 16, name: "Thunder Guardian", cost: 5, attack: 3, health: 6, taunt: true, description: "Guards with electric might.", backgroundImage: "https://i.imgur.com/jKE3ClI.png", uid: "season0_16" },
                    { id: 17, name: "Blaze Warden", cost: 5, attack: 3, health: 6, taunt: true, description: "Guards with fiery resolve.", backgroundImage: "https://i.imgur.com/XJ8Saun.png", uid: "season0_17" },
                    { id: 18, name: "Frost Protector", cost: 5, attack: 3, health: 6, taunt: true, description: "Guards with icy resilience.", backgroundImage: "https://i.imgur.com/fGDbB5o.png", uid: "season0_18" },
                    { id: 21, name: "Celestial Warden", cost: 6, attack: 5, health: 5, healAll: 1, description: "Heals all for 1 each turn.", backgroundImage: "https://i.imgur.com/6CXJn5s.png", uid: "season0_21" },
                    { id: 22, name: "Abyssal Keeper", cost: 6, attack: 5, health: 5, healAll: 1, description: "Heals all with dark energy.", backgroundImage: "https://i.imgur.com/3b2RmGQ.png", uid: "season0_22" },
                    { id: 23, name: "Storm Cavalier", cost: 4, attack: 4, health: 4, description: "Rides the storm into battle.", backgroundImage: "https://i.imgur.com/nBUKWdy.png", uid: "season0_23" },
                    { id: 24, name: "Flame Charger", cost: 4, attack: 4, health: 4, description: "Charges with fiery speed.", backgroundImage: "https://i.imgur.com/cep6ytB.png", uid: "season0_24" },
                    { id: 25, name: "Ra Cal Vin", cost: 4, attack: 4, health: 4, description: "Glides with icy Language.", backgroundImage: "https://i.imgur.com/XbSuPyC.png", uid: "season0_25" },
                    { id: 26, name: "Void Sorcerer", cost: 5, attack: 3, health: 4, taunt: true, description: "Casts protective dark magic.", backgroundImage: "https://i.imgur.com/2XhqS6d.png", uid: "season0_26" },
                    { id: 27, name: "Light Mage", cost: 5, attack: 3, health: 4, taunt: true, description: "Shields with radiant magic.", backgroundImage: "https://i.imgur.com/cMLK4Oq.png", uid: "season0_27" },
                    { id: 30, name: "Spectral Warrior", cost: 5, attack: 5, health: 4, description: "Fights with ghostly strength.", backgroundImage: "https://i.imgur.com/n2b1ugT.png", uid: "season0_30" },
                    { id: 31, name: "Radiant Paladin", cost: 5, attack: 5, health: 4, description: "Shines with radiant power.", backgroundImage: "https://i.imgur.com/TalRqz3.png", uid: "season0_31" },
                    { id: 32, name: "Ethereal Phantom", cost: 3, attack: 2, health: 3, description: "Haunts the battlefield.", backgroundImage: "https://i.imgur.com/v0RBTiV.png", uid: "season0_32" },
                    { id: 33, name: "Crimson Shade", cost: 3, attack: 2, health: 3, description: "Burns with crimson energy.", backgroundImage: "https://i.imgur.com/36iR3J8.png", uid: "season0_33" },
                    { id: 34, name: "Logs Much", cost: 3, attack: 2, health: 3, description: "Wooden with Steel presence.", backgroundImage: "https://i.imgur.com/PFbnxct.png", uid: "season0_34" },
                    { id: 35, name: "Abyssal Monolith", cost: 7, attack: 6, health: 6, taunt: true, description: "Dominates with abyssal might.", backgroundImage: "https://i.imgur.com/1VehWYG.png", uid: "season0_35" },
                    { id: 36, name: "Celestial Serph", cost: 7, attack: 6, health: 6, taunt: true, description: "Protects with celestial power.", backgroundImage: "https://i.imgur.com/GvWB71v.png", uid: "season0_36" },
                    { id: 37, name: "Thundering Yordy", cost: 6, attack: 5, health: 5, description: "Bats with thunderous force.", backgroundImage: "https://i.imgur.com/UvZsOLQ.png", uid: "season0_37" },
                    { id: 38, name: "Flame Dragon", cost: 6, attack: 5, health: 5, description: "Burns with fiery wrath.", backgroundImage: "https://i.imgur.com/BocWQdv.png", uid: "season0_38" },
                    { id: 39, name: "Star Traveler", cost: 6, attack: 5, health: 5, description: "Strikes with void energy.", backgroundImage: "https://i.imgur.com/I3o9UZS.png", uid: "season0_39" },
                    { id: 51, name: "Luminous Watcher", cost: 3, attack: 2, health: 3, healAll: 1, description: "Heals all for 1 each turn.", backgroundImage: "https://i.imgur.com/eg8FESL.png", uid: "season0_51" },
                    { id: 52, name: "Vitality Totem", cost: 5, attack: 3, health: 5, healAll: 2, description: "Heals all for 2 each turn.", backgroundImage: "https://i.imgur.com/SAL2oQY.png", uid: "season0_52" },
                    { id: 53, name: "Alpha Skiff", cost: 2, attack: 1, health: 2, ability: "dealDamage", damage: 2, type: "minion", description: "On play: Deal 2 damage to an enemy.", backgroundImage: "https://i.imgur.com/z1fbkXx.png", uid: "season0_53" },
                    { id: 54, name: "Beta Cruiser", cost: 4, attack: 3, health: 3, ability: "dealDamage", damage: 5, type: "minion", description: "On play: Deal 5 damage to an enemy.", backgroundImage: "https://i.imgur.com/JuxTEX9.png", uid: "season0_54" },
                    { id: 55, name: "Omega Dreadnought", cost: 6, attack: 4, health: 5, ability: "boostAllies", boostAttack: 1, type: "minion", description: "On play: Give all allies +1 attack.", backgroundImage: "https://i.imgur.com/Phx6yjU.png", uid: "season0_55" },
                    { id: 56, name: "A Coward Priest", cost: 1, attack: 1, health: 1, description: "Basic reconnaissance unit.", backgroundImage: "https://i.imgur.com/DHS25YU.jpeg", uid: "season0_56" },
                    { id: 57, name: "Patrol Frigate", cost: 3, attack: 2, health: 3, description: "Standard patrol vessel.", backgroundImage: "https://i.imgur.com/nJMY8NA.png", uid: "season0_57" },
                    { id: 58, name: "Ironclad Titan", cost: 5, attack: 4, health: 4, description: "Heavy armored enforcer.", backgroundImage: "https://i.imgur.com/yUzjTDm.png", uid: "season0_58" },
                    { id: 60, name: "Overlord Mind", cost: 5, attack: 4, health: 4, taunt: true, type: "minion", description: "Taunt.", backgroundImage: "https://i.imgur.com/LspYMpz.png", uid: "season0_60" },
                    { id: 61, name: "Dragon King", cost: 7, attack: 5, health: 5, type: "minion", description: "Powerful undead leader.", backgroundImage: "https://i.imgur.com/uaeSik8.png", uid: "season0_61" },
                    { id: 62, name: "Enigmatic Warrior", cost: 4, attack: 3, health: 3, type: "minion", description: "Mysterious combatant.", backgroundImage: "https://i.imgur.com/JwcxWth.png", uid: "season0_62" },
                    { id: 63, name: "Battle Commander", cost: 3, attack: 2, health: 4, type: "minion", description: "Leads the charge.", backgroundImage: "https://i.imgur.com/ABsno64.png", uid: "season0_63" },
                    { id: 64, name: "Orcish Sniper", cost: 2, attack: 2, health: 1, type: "minion", description: "Ranged attacker.", backgroundImage: "https://i.imgur.com/nlkfMpI.png", uid: "season0_64" },
                    { id: 65, name: "Valor Knight", cost: 6, attack: 5, health: 4, type: "minion", description: "Elite fighter.", backgroundImage: "https://i.imgur.com/LjBBzdn.png", uid: "season0_65" },
                    { id: 66, name: "Starborn Light", cost: 1, attack: 1, health: 1, type: "minion", description: "Summons structures.", backgroundImage: "https://i.imgur.com/iWv48Xl.png", uid: "season0_66" },
                    { id: 67, name: "Stoned Ape", cost: 8, attack: 8, health: 8, taunt: true, description: "Unstoppable celestial force.", backgroundImage: "https://i.imgur.com/iWv48Xl.png", uid: "season0_67" },
                    { id: 68, name: "Abyssal Leviathan", cost: 8, attack: 7, health: 9, ability: "dealDamage", damage: 3, type: "minion", description: "Crushes foes with abyssal might.", backgroundImage: "https://i.imgur.com/SbU1dfG.png", uid: "season0_68" },
                    { id: 11, name: "Plasma Surge", cost: 2, damage: 4, type: "directDamage", description: "Blasts for 4 damage.", backgroundImage: "https://i.imgur.com/MDra3S8.png", uid: "season0_11" },
                    { id: 12, name: "Fire Barrage", cost: 3, damage: 5, type: "directDamage", description: "Freezes for 5 damage.", backgroundImage: "https://i.imgur.com/lAUM1L7.png", uid: "season0_12" },
                    { id: 19, name: "Arcane Burst", cost: 3, damage: 6, type: "directDamage", description: "Unleashes arcane energy for 6 damage.", backgroundImage: "https://i.imgur.com/sZEdhnc.png", uid: "season0_19" },
                    { id: 20, name: "Void Rift", cost: 3, damage: 6, type: "directDamage", description: "Channels void energy for 6 damage.", backgroundImage: "https://i.imgur.com/KjBYZ7L.png", uid: "season0_20" },
                    { id: 28, name: "Epic Strike", cost: 4, damage: 8, type: "directDamage", description: "Unleashes chaotic energy for 8 damage.", backgroundImage: "https://i.imgur.com/YxGHZ7l.png", uid: "season0_28" },
                    { id: 29, name: "Chaos Vortrx", cost: 4, damage: 8, type: "directDamage", description: "Strikes with fire and wind for 8 damage.", backgroundImage: "https://i.imgur.com/dramBbf.png", uid: "season0_29" },
                    { id: 40, name: "Starfire Nova", cost: 5, damage: 10, type: "directDamage", description: "Unleashes starfire for 10 damage.", backgroundImage: "https://i.imgur.com/3cpJ2XF.png", uid: "season0_40" },
                    { id: 41, name: "Moonfire Wave", cost: 5, damage: 10, type: "directDamage", description: "Strikes with moonfire for 10 damage.", backgroundImage: "https://i.imgur.com/1iicyne.png", uid: "season0_41" },
                    { id: 42, name: "Flame Pulse", cost: 4, damage: 8, type: "directDamage", description: "Casts an eclipse for 8 damage.", backgroundImage: "https://i.imgur.com/5PSOVVc.png", uid: "season0_42" },
                    { id: 43, name: "Thunder Strike", cost: 6, damage: 7, type: "directDamage", description: "Strikes for 7 damage.", backgroundImage: "https://i.imgur.com/8DLbQp4.png", uid: "season0_43" },
                    { id: 44, name: "Void Eruption", cost: 8, damage: 10, type: "directDamage", description: "Obliterates for 10 damage.", backgroundImage: "https://i.imgur.com/KEPxMIp.png", uid: "season0_44" },
                    { id: 45, name: "Desperate Repair", cost: 2, healing: 4, type: "healing", description: "Repairs for 4 health.", backgroundImage: "https://i.imgur.com/dyC5M5D.png", uid: "season0_45" },
                    { id: 46, name: "Core Renewal", cost: 4, healing: 6, type: "healing", description: "Restores 6 health.", backgroundImage: "https://i.imgur.com/8fYU7nG.png", uid: "season0_46" },
                    { id: 47, name: "Vital Infusion", cost: 6, healing: 8, type: "healing", description: "Boosts 8 health.", backgroundImage: "https://i.imgur.com/BmCZ9hn.png", uid: "season0_47" },
                    { id: 48, name: "Life Cascade", cost: 8, healing: 12, type: "healing", description: "Surges 12 health.", backgroundImage: "https://i.imgur.com/C75RopO.png", uid: "season0_48" },
                    { id: 49, name: "Mana Surge", cost: 0, type: "manaStorm", description: "Grants 2 mana this turn.", backgroundImage: "https://i.imgur.com/dU3QrVi.png", uid: "season0_49" },
                    { id: 50, name: "Tactical Insight", cost: 3, type: "drawCard", description: "Draws 2 cards.", backgroundImage: "https://i.imgur.com/LhKeIUk.png", uid: "season0_50" },
                    { id: 59, name: "Skull Hex", cost: 3, damage: 3, type: "directDamage", description: "Deals 3 damage to an enemy.", backgroundImage: "https://i.imgur.com/XOkb25e.jpg", uid: "season0_59" }
                ];

        function updateUserInfo() {
            const userInfoEl = document.getElementById('username-display');
            const creditsInfoEl = document.getElementById('credits-info');
            const loginBtn = document.getElementById('login-btn');
            const avatarEl = document.getElementById('user-avatar');

            if (user.id) {
                userInfoEl.textContent = user.username || 'Unknown User';
                creditsInfoEl.textContent = `Balance: ${credits} $GBuX`;
                avatarEl.src = user.avatar || '';
                avatarEl.classList.toggle('hidden', !user.avatar);
                loginBtn.classList.add('hidden');
                userInfoEl.classList.add('clickable');
            } else {
                userInfoEl.textContent = 'Not logged in';
                creditsInfoEl.textContent = 'Balance: 0 $GBuX';
                avatarEl.classList.add('hidden');
                loginBtn.classList.remove('hidden');
                userInfoEl.classList.remove('clickable');
            }
            document.getElementById('gbux-balance').textContent = credits;
            document.getElementById('mint-btn').disabled = !user.id || credits < 10;
            document.getElementById('save-deck-btn').disabled = selectedCards.length === 0 || selectedCards.length > 20;
            document.getElementById('play-game-btn').disabled = nexusDeck.length === 0;
            document.getElementById('pack-count').textContent = packs;
            document.getElementById('buy-pack-btn').classList.toggle('hidden', packs > 0);
            document.getElementById('buy-pack-btn').disabled = credits < 500;
            const now = Date.now();
            document.getElementById('claim-gbux-btn').disabled = now - lastClaimTime < 24 * 60 * 60 * 1000;
            document.getElementById('undo-btn').disabled = currentDraftIndex <= 0;
            document.getElementById('redo-btn').disabled = currentDraftIndex >= draftHistory.length - 1;
        }

        async function loadUserCards() {
            libraryCards = [grudgeCard, ...season0];
            if (user.id && dbClient) {
                const { data, error } = await dbClient.from('cards').select('*').eq('userId', user.id);
                if (!error) {
                    libraryCards.push(...data.map(card => ({ ...card, uid: card.uid || crypto.randomUUID() })));
                    ownedCards = data.map(card => card.id);
                }
            }
            ownedCards.push(0);
            localStorage.setItem('ownedCards', JSON.stringify(ownedCards));
            renderTabs();
        }

        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                button.classList.add('active');
                document.getElementById(button.dataset.tab).classList.add('active');
                if (button.dataset.tab === 'library') renderLibrary('all', 0);
                else if (button.dataset.tab === 'create-card') renderCreateCard();
                else if (button.dataset.tab === 'deck-builder') renderDeckBuilder();
                else if (button.dataset.tab === 'nexus-deck') renderNexusDeck();
                else if (button.dataset.tab === 'packs') renderPacks();
            });
        });

        function renderTabs() {
            renderLibrary('all', 0);
            renderCreateCard();
            renderDeckBuilder();
            renderNexusDeck();
            renderPacks();
        }

        let libraryPage = 0;
        function renderLibrary(filter, page) {
            const container = document.getElementById('library-cards');
            container.innerHTML = '';
            let filteredCards = [...libraryCards];
            const search = document.getElementById('search-bar').value.toLowerCase();
            if (search) filteredCards = filteredCards.filter(c => c.name.toLowerCase().includes(search));
            if (filter === 'owned') filteredCards = filteredCards.filter(c => ownedCards.includes(c.id));
            else if (filter === 'minions') filteredCards = filteredCards.filter(c => c.attack !== undefined);
            else if (filter === 'spells') filteredCards = filteredCards.filter(c => c.attack === undefined);
            else if (filter === 'mana-low') filteredCards = filteredCards.filter(c => c.cost <= 3);
            else if (filter === 'mana-high') filteredCards = filteredCards.filter(c => c.cost >= 4);

            const start = page * 12;
            const end = start + 12;
            filteredCards.slice(start, end).forEach(card => {
                const isOwned = ownedCards.includes(card.id);
                const cardEl = createCardElement(card, isOwned ? user.username : "Unknown");
                if (!isOwned) {
                    cardEl.classList.add('not-owned');
                    const priceOverlay = document.createElement('div');
                    priceOverlay.className = 'price-overlay';
                    priceOverlay.textContent = `${card.cost * 20} $GBuX`;
                    cardEl.appendChild(priceOverlay);
                    const buyBtn = document.createElement('button');
                    buyBtn.textContent = 'Buy';
                    buyBtn.className = 'btn bg-[#D4A017] text-black font-bold py-1.5 px-3 rounded absolute bottom-2.5 right-2.5';
                    buyBtn.addEventListener('click', (e) => { e.stopPropagation(); buyCard(card); });
                    cardEl.appendChild(buyBtn);
                } else {
                    cardEl.addEventListener('click', () => tryAddToNexusDeck(card));
                }
                addHoverEffect(cardEl, card);
                container.appendChild(cardEl);
            });
            document.getElementById('library-left').disabled = page === 0;
            document.getElementById('library-right').disabled = end >= filteredCards.length;
        }

        function renderCreateCard() {
            const theme = document.getElementById('card-theme').value;
            const previewContainer = document.getElementById('card-preview-container');
            previewContainer.innerHTML = '<p class="text-gray-400 text-center text-xl">Your card will appear here once minted</p>';
            document.getElementById('undo-btn').classList.toggle('hidden', draftHistory.length <= 0);
            document.getElementById('redo-btn').classList.toggle('hidden', draftHistory.length <= 0);
            updateUserInfo();
        }

        function renderDeckBuilder() {
            const selectedContainer = document.getElementById('selected-cards');
            const availableContainer = document.getElementById('deck-builder-cards');
            selectedContainer.innerHTML = '';
            availableContainer.innerHTML = '';
            document.getElementById('deck-count').textContent = selectedCards.length;

            selectedCards.forEach(card => {
                const cardEl = createCardElement(card, user.username);
                cardEl.classList.add('selected');
                cardEl.addEventListener('click', () => removeFromDeck(card));
                addHoverEffect(cardEl, card);
                selectedContainer.appendChild(cardEl);
            });

            let filteredCards = libraryCards.filter(c => ownedCards.includes(c.id));
            const search = document.getElementById('deck-search').value.toLowerCase();
            if (search) filteredCards = filteredCards.filter(c => c.name.toLowerCase().includes(search));
            filteredCards.forEach(card => {
                const cardEl = createCardElement(card, user.username);
                cardEl.addEventListener('click', () => addToDeck(card));
                addHoverEffect(cardEl, card);
                availableContainer.appendChild(cardEl);
            });
        }

        function renderNexusDeck() {
            const deck1Card = document.getElementById('deck-1-card');
            const deck2Card = document.getElementById('deck-2-card');
            const deck3Card = document.getElementById('deck-3-card');
            [deck1Card, deck2Card, deck3Card].forEach((el, index) => {
                el.innerHTML = '';
                const slot = String(index + 1);
                const deck = (savedDecks[slot]?.cards || []).slice(0, 1)[0] || {};
                if (deck.id !== undefined) {
                    el.style.backgroundImage = `url('${deck.backgroundImage}')`;
                    if (deck.hue) el.classList.add(deck.hue);
                    el.innerHTML = `
                        <div class="cost">${deck.cost}</div>
                        <div class="season0-indicator"></div>
                        <div class="card-info">
                            <div class="card-name">${deck.name}</div>
                            <div class="stats">${deck.attack !== undefined ? `${deck.attack}/${deck.health}` : 'Special'}</div>
                            <div class="description">${deck.description}</div>
                        </div>
                    `;
                    el.addEventListener('click', () => openDeckModal(slot));
                } else {
                    el.style.backgroundImage = 'none';
                    el.innerHTML = '<div class="card-info"><div class="card-name">Empty</div></div>';
                }
                addHoverEffect(el, deck);
            });
        }

        function openDeckModal(slot) {
            const modal = document.getElementById('deck-modal');
            const deck = savedDecks[slot]?.cards || [];
            const name = savedDecks[slot]?.name || `Deck ${slot}`;
            document.getElementById('deck-modal-name').textContent = name;
            const container = document.getElementById('deck-modal-cards');
            container.innerHTML = '';
            deck.forEach(card => {
                const cardEl = createCardElement(card, user.username);
                container.appendChild(cardEl);
            });

            const costCounts = {};
            let minions = 0, spells = 0;
            deck.forEach(card => {
                costCounts[card.cost] = (costCounts[card.cost] || 0) + 1;
                if (card.attack !== undefined) minions++;
                else spells++;
            });
            document.getElementById('deck-stats').innerHTML = `
                <p>Cost Breakdown: ${Object.entries(costCounts).map(([cost, count]) => `${cost}: ${count}`).join(', ')}</p>
                <p>Minions: ${minions}</p>
                <p>Spells: ${spells}</p>
            `;
            modal.classList.remove('hidden');
        }

        function renderPacks() {
            const container = document.getElementById('packs-container');
            container.innerHTML = '';
            if (packs <= 0) {
                const buyPackImage = document.createElement('div');
                buyPackImage.className = 'buy-pack-image';
                buyPackImage.addEventListener('click', () => {
                    if (credits < 500) return alert('Not enough $GBuX! Need 500.');
                    credits -= 500;
                    packs++;
                    localStorage.setItem('credits', credits);
                    if (dbClient && user.id) dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
                    updateUserInfo();
                    renderPacks();
                    alert('Purchased a pack for 500 $GBuX!');
                });
                container.appendChild(buyPackImage);
            } else {
                for (let i = 0; i < packs; i++) {
                    const packEl = document.createElement('div');
                    packEl.className = 'pack-card';
                    const randomCard = season0[Math.floor(Math.random() * season0.length)];
                    packEl.innerHTML = `
                        <div class="pack-front"></div>
                        <div class="pack-back card-display ${randomCard.hue || ''}" style="background-image: url('${randomCard.backgroundImage}')">
                            <div class="cost">${randomCard.cost}</div>
                            <div class="season0-indicator"></div>
                            <div class="card-info">
                                <div class="card-name">${randomCard.name}</div>
                                <div class="stats">${randomCard.attack !== undefined ? `${randomCard.attack}/${randomCard.health}` : 'Special'}</div>
                                <div class="description">${randomCard.description}</div>
                            </div>
                        </div>
                    `;
                    packEl.addEventListener('click', () => openPack());
                    container.appendChild(packEl);
                }
            }
            updateCollectionProgress();
        }

        function createCardElement(card, ownerName) {
            const cardEl = document.createElement('div');
            cardEl.className = `card-display ${card.hue || ''}`;

            // Apply border based on card type
            if (card.type === 'directDamage' || card.type === 'healing' || card.type === 'manaStorm' || card.type === 'drawCard') {
                cardEl.classList.add('spell');
            } else if (card.attack !== undefined) {
                if (card.taunt) cardEl.classList.add('minion-taunt');
                else if (card.ability) cardEl.classList.add('minion-effect');
                else cardEl.classList.add('minion-normal');
            }

            cardEl.style.backgroundImage = `url('${card.backgroundImage}')`;
            cardEl.dataset.card = JSON.stringify(card);
            cardEl.innerHTML = `
                <div class="cost">${card.cost}</div>
                <div class="season0-indicator"></div>
                <div class="card-info">
                    <div class="card-name">${!user.id || !ownedCards.includes(card.id) ? 'Unknown' : `${card.name} (Owner ${ownerName})`}</div>
                    <div class="stats">${card.attack !== undefined ? `${card.attack}/${card.health}${card.taunt ? ' (Taunt)' : ''}${card.healAll ? ` (Heal ${card.healAll})` : ''}` : card.damage ? `Dmg: ${card.damage}` : card.healing ? `Heal: ${card.healing}` : 'Special'}</div>
                    <div class="description">${!user.id || !ownedCards.includes(card.id) ? 'Unknown card details.' : card.description}</div>
                </div>
            `;
            return cardEl;
        }

        function addHoverEffect(cardEl, card) {
            const preview = document.getElementById('card-preview');
            const codexUi = document.getElementById('codex-ui');

            cardEl.addEventListener('mousemove', (e) => {
                clearTimeout(previewTimeout);
                const rect = codexUi.getBoundingClientRect();
                const mouseX = e.clientX - rect.left;
                const mouseY = e.clientY - rect.top;
                const previewWidth = 300;
                const previewHeight = 450;
                const offset = 20;

                const isMouseOnLeft = mouseX < rect.width / 2;
                let leftPos = isMouseOnLeft ? mouseX + offset : mouseX - previewWidth - offset;
                leftPos = Math.max(0, Math.min(leftPos, rect.width - previewWidth));
                const topPos = Math.max(0, Math.min(mouseY - previewHeight / 2, rect.height - previewHeight));

                preview.style.left = `${leftPos}px`;
                preview.style.top = `${topPos}px`;
                preview.style.backgroundImage = `url('${card.backgroundImage}')`;
                preview.className = `card-preview ${card.hue || ''}`;
                preview.querySelector('.cost').textContent = card.cost;
                preview.querySelector('.season0-indicator').style.display = 'block';
                preview.querySelector('.card-name').textContent = !user.id || !ownedCards.includes(card.id) ? 'name' : `${card.name} (Owner ${user.username})`;
                preview.querySelector('.stats').textContent = card.attack !== undefined ? `${card.attack}/${card.health}${card.taunt ? ' (Taunt)' : ''}${card.healAll ? ` (Heal ${card.healAll})` : ''}` : card.damage ? `Dmg: ${card.damage}` : card.healing ? `Heal: ${card.healing}` : 'Special';
                preview.querySelector('.description').textContent = !user.id || !ownedCards.includes(card.id) ? 'description' : card.description;
                preview.style.display = 'block';
            });

            cardEl.addEventListener('mouseleave', () => {
                previewTimeout = setTimeout(() => {
                    preview.style.display = 'none';
                }, 100);
            });

            if (card.type === 'directDamage') {
                cardEl.addEventListener('click', () => {
                    const hitEffect = document.createElement('div');
                    hitEffect.className = 'hit-effect';
                    cardEl.appendChild(hitEffect);
                    setTimeout(() => hitEffect.remove(), 1000);
                });
            }
        }

        function addToDeck(card) {
            if (selectedCards.length >= 20) return alert('Deck limit reached (20 cards)!');
            if (card.id !== 0 && selectedCards.filter(c => c.id === card.id).length >= 2) return alert('Max 2 copies per card (except Grudge)!');
            selectedCards.push({ ...card, uid: crypto.randomUUID() });
            renderDeckBuilder();
        }

        function removeFromDeck(card) {
            const index = selectedCards.findIndex(c => c.uid === card.uid);
            if (index !== -1) {
                selectedCards.splice(index, 1);
                renderDeckBuilder();
            }
        }

        function tryAddToNexusDeck(card) {
            if (!ownedCards.includes(card.id)) return alert('You must own this card!');
            if (card.id !== 0 && nexusDeck.filter(c => c.id === card.id).length >= 2) return alert('Max 2 copies per card (except Grudge)!');
            nexusDeck.push({ ...card, uid: crypto.randomUUID() });
            localStorage.setItem('nexusDeck', JSON.stringify(nexusDeck));
            renderNexusDeck();
            updateUserInfo();
        }

        function removeFromNexusDeck(card) {
            const index = nexusDeck.findIndex(c => c.uid === card.uid);
            if (index !== -1) {
                nexusDeck.splice(index, 1);
                localStorage.setItem('nexusDeck', JSON.stringify(nexusDeck));
                renderNexusDeck();
                updateUserInfo();
            }
        }

        function buyCard(card) {
            const cost = card.cost * 20;
            if (credits < cost) return alert(`Not enough $GBuX! Need ${cost}`);
            if (ownedCards.includes(card.id)) return alert('You already own this card!');
            credits -= cost;
            ownedCards.push(card.id);
            libraryCards.push({ ...card, uid: crypto.randomUUID() });
            localStorage.setItem('credits', credits);
            localStorage.setItem('ownedCards', JSON.stringify(ownedCards));
            if (dbClient && user.id) {
                dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
                dbClient.from('cards').insert([{ ...card, userId: user.id, gbuxCost: cost }]);
            }
            updateUserInfo();
            renderLibrary('all', libraryPage);
            alert(`Purchased ${card.name} for ${cost} $GBuX!`);
        }

        function openPack() {
            if (packs <= 0) return alert('No packs available! Buy more for 500 $GBuX.');
            packs--;
            const resultContainer = document.getElementById('pack-result');
            resultContainer.innerHTML = '';
            const cardsWon = [];
            for (let i = 0; i < 3; i++) {
                const randomCard = season0[Math.floor(Math.random() * season0.length)];
                const cardEl = createCardElement(randomCard, user.username);
                cardEl.classList.add('pack-result-card');
                if (ownedCards.includes(randomCard.id)) {
                    const gbuxReward = randomCard.cost * 20;
                    credits += gbuxReward;
                    cardEl.style.animation = 'fadeOut 1s ease forwards';
                    setTimeout(() => cardEl.remove(), 1000);
                    resultContainer.innerHTML += `<p class="text-xl mt-2.5">Duplicate ${randomCard.name} - +${gbuxReward} $GBuX</p>`;
                } else {
                    ownedCards.push(randomCard.id);
                    libraryCards.push({ ...randomCard, uid: crypto.randomUUID() });
                    resultContainer.appendChild(cardEl);
                }
                cardsWon.push(randomCard);
            }
            localStorage.setItem('credits', credits);
            localStorage.setItem('ownedCards', JSON.stringify(ownedCards));
            updateUserInfo();
            renderPacks();
            renderLibrary('all', libraryPage);
            playSound('packOpen');
            checkBonusReward();
        }

        function checkBonusReward() {
            if (Math.random() < 0.1) { // 10% chance for bonus
                const bonus = Math.floor(Math.random() * 100) + 50; // 50-150 $GBuX
                credits += bonus;
                alert(`Bonus Reward! +${bonus} $GBuX`);
                localStorage.setItem('credits', credits);
                if (dbClient && user.id) dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
                updateUserInfo();
            }
        }

        function updateCollectionProgress() {
            const totalCards = new Set(season0.map(c => c.id)).size;
            const ownedUniqueCards = new Set(ownedCards.filter(id => id > 0)).size;
            document.getElementById('collection-progress').textContent = `Collection: ${ownedUniqueCards}/${totalCards} (${((ownedUniqueCards / totalCards) * 100).toFixed(1)}%)`;
        }

        document.getElementById('buy-pack-btn').addEventListener('click', () => {
            if (credits < 500) return alert('Not enough $GBuX! Need 500.');
            credits -= 500;
            packs++;
            localStorage.setItem('credits', credits);
            if (dbClient && user.id) dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
            updateUserInfo();
            renderPacks();
            alert('Purchased a pack for 500 $GBuX!');
        });

        document.getElementById('save-deck-btn').addEventListener('click', () => {
            const deckName = document.getElementById('deck-name').value || `Deck ${currentDeckSlot}`;
            savedDecks[currentDeckSlot] = { name: deckName, cards: [...selectedCards] };
            localStorage.setItem('savedDecks', JSON.stringify(savedDecks));
            nexusDeck = [...selectedCards];
            localStorage.setItem('nexusDeck', JSON.stringify(nexusDeck));
            if (user.id && dbClient) dbClient.from('decks').upsert({ userId: user.id, slot: currentDeckSlot, deck: savedDecks[currentDeckSlot] });
            alert(`Deck saved as ${deckName} in slot ${currentDeckSlot}!`);
            renderNexusDeck();
            updateUserInfo();
        });

        document.getElementById('play-game-btn').addEventListener('click', async () => {
            if (nexusDeck.length === 0) return alert('Select a deck first!');
            if (!user.id) return alert('Please log in to earn rewards!');
            credits += 10;
            localStorage.setItem('credits', credits);
            if (dbClient) await dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
            updateUserInfo();
            alert('Earned 10 $GBuX! Redirecting to game...');
            window.location.href = 'https://www.grudgeplatform.com/nexus';
        });

        document.getElementById('claim-gbux-btn').addEventListener('click', () => {
            const now = Date.now();
            if (now - lastClaimTime >= 24 * 60 * 60 * 1000) {
                credits += 200;
                lastClaimTime = now;
                localStorage.setItem('credits', credits);
                localStorage.setItem('lastClaimTime', lastClaimTime);
                if (dbClient && user.id) dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
                updateUserInfo();
                alert('Successfully claimed 200 $GBuX!');
            } else {
                const timeLeft = Math.ceil((24 * 60 * 60 * 1000 - (now - lastClaimTime)) / (60 * 60 * 1000));
                alert(`Wait ${timeLeft} hours until next claim!`);
            }
        });

        document.getElementById('mint-btn').addEventListener('click', async () => {
            if (!user.id) return alert('Please log in!');
            if (credits < 10) return alert('Need 10 $GBuX to mint!');
            const name = document.getElementById('card-name').value.trim();
            if (!name) return alert('Card name required!');
            const file = document.getElementById('card-image').files[0];
            if (!file) return alert('Please upload an image!');

            const attack = parseInt(document.getElementById('attack').value);
            const health = parseInt(document.getElementById('health').value);
            const taunt = document.getElementById('taunt').checked;
            const healAll = document.getElementById('healAll').checked ? 1 : 0;
            const theme = document.getElementById('card-theme').value;

            const reader = new FileReader();
            reader.onload = async (e) => {
                const backgroundImage = e.target.result;
                const cost = Math.round((attack + health) / 2 + (taunt ? 1 : 0) + (healAll ? 1 : 0));
                const newCard = {
                    id: libraryCards.length,
                    name,
                    cost,
                    attack,
                    health,
                    taunt,
                    healAll,
                    description: `Custom card: ${taunt ? 'Taunt ' : ''}${healAll ? 'Heal All (1) ' : ''}`,
                    backgroundImage,
                    uid: crypto.randomUUID(),
                    theme
                };

                credits -= 10;
                ownedCards.push(newCard.id);
                libraryCards.push(newCard);
                saveDraft(newCard);
                localStorage.setItem('credits', credits);
                localStorage.setItem('ownedCards', JSON.stringify(ownedCards));
                if (dbClient && user.id) {
                    await dbClient.from('user_credits').upsert({ userId: user.id, credits, last_updated: new Date().toISOString() });
                    await dbClient.from('cards').insert([{ ...newCard, userId: user.id, gbuxCost: 10 }]);
                }
                updateUserInfo();
                renderLibrary('all', libraryPage);
                alert(`Successfully minted ${name} for 10 $GBuX!`);
            };
            reader.readAsDataURL(file);
        });

        function saveDraft(card) {
            if (currentDraftIndex < draftHistory.length - 1) {
                draftHistory = draftHistory.slice(0, currentDraftIndex + 1);
            }
            draftHistory.push(card);
            currentDraftIndex = draftHistory.length - 1;
            localStorage.setItem('draftHistory', JSON.stringify(draftHistory));
            localStorage.setItem('currentDraftIndex', currentDraftIndex);
            updateUserInfo();
        }

        document.getElementById('save-draft-btn').addEventListener('click', () => {
            const name = document.getElementById('card-name').value.trim();
            const attack = parseInt(document.getElementById('attack').value);
            const health = parseInt(document.getElementById('health').value);
            const taunt = document.getElementById('taunt').checked;
            const healAll = document.getElementById('healAll').checked ? 1 : 0;
            const theme = document.getElementById('card-theme').value;
            const draft = { name, attack, health, taunt, healAll, theme, uid: crypto.randomUUID() };
            saveDraft(draft);
            alert('Draft saved successfully!');
        });

        document.getElementById('undo-btn').addEventListener('click', () => {
            if (currentDraftIndex > 0) {
                currentDraftIndex--;
                applyDraft();
                updateUserInfo();
            }
        });

        document.getElementById('redo-btn').addEventListener('click', () => {
            if (currentDraftIndex < draftHistory.length - 1) {
                currentDraftIndex++;
                applyDraft();
                updateUserInfo();
            }
        });

        function applyDraft() {
            const draft = draftHistory[currentDraftIndex];
            if (draft) {
                document.getElementById('card-name').value = draft.name || '';
                document.getElementById('attack').value = draft.attack || 1;
                document.getElementById('health').value = draft.health || 1;
                document.getElementById('taunt').checked = draft.taunt || false;
                document.getElementById('healAll').checked = draft.healAll || false;
                document.getElementById('card-theme').value = draft.theme || 'default';
                document.getElementById('attack-value').textContent = draft.attack || 1;
                document.getElementById('health-value').textContent = draft.health || 1;
            }
        }

        document.getElementById('image-upload').addEventListener('click', () => {
            document.getElementById('card-image').click();
        });

        document.getElementById('card-image').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (ev) => {
                    document.getElementById('image-upload').innerHTML = `<img src="${ev.target.result}" class="w-full h-full object-cover" />`;
                    saveDraft({ ...getCurrentDraft(), backgroundImage: ev.target.result });
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('attack').addEventListener('input', (e) => {
            document.getElementById('attack-value').textContent = e.target.value;
            saveDraft(getCurrentDraft());
        });

        document.getElementById('health').addEventListener('input', (e) => {
            document.getElementById('health-value').textContent = e.target.value;
            saveDraft(getCurrentDraft());
        });

        document.getElementById('card-theme').addEventListener('change', () => {
            saveDraft(getCurrentDraft());
        });

        document.getElementById('taunt').addEventListener('change', () => {
            saveDraft(getCurrentDraft());
        });

        document.getElementById('healAll').addEventListener('change', () => {
            saveDraft(getCurrentDraft());
        });

        document.getElementById('card-name').addEventListener('input', () => {
            saveDraft(getCurrentDraft());
        });

        function getCurrentDraft() {
            return {
                name: document.getElementById('card-name').value.trim(),
                attack: parseInt(document.getElementById('attack').value),
                health: parseInt(document.getElementById('health').value),
                taunt: document.getElementById('taunt').checked,
                healAll: document.getElementById('healAll').checked ? 1 : 0,
                theme: document.getElementById('card-theme').value,
                uid: crypto.randomUUID()
            };
        }

        document.getElementById('search-bar').addEventListener('input', () => {
            renderLibrary(document.querySelector('.sub-tab-button.active').dataset.subTab, libraryPage);
        });

        document.getElementById('deck-search').addEventListener('input', () => {
            renderDeckBuilder();
        });

        document.querySelectorAll('.sub-tab-button').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.sub-tab-button').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                libraryPage = 0;
                renderLibrary(button.dataset.subTab, libraryPage);
            });
        });

        document.querySelectorAll('.deck-slot').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.deck-slot').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                currentDeckSlot = button.dataset.slot;
                selectedCards = savedDecks[currentDeckSlot]?.cards || [];
                renderDeckBuilder();
            });
        });

        document.getElementById('library-left').addEventListener('click', () => {
            if (libraryPage > 0) {
                libraryPage--;
                renderLibrary(document.querySelector('.sub-tab-button.active').dataset.subTab, libraryPage);
            }
        });

        document.getElementById('library-right').addEventListener('click', () => {
            libraryPage++;
            renderLibrary(document.querySelector('.sub-tab-button.active').dataset.subTab, libraryPage);
        });

        document.getElementById('close-modal').addEventListener('click', () => {
            document.getElementById('player-modal').classList.add('hidden');
        });

        document.getElementById('close-deck-modal').addEventListener('click', () => {
            document.getElementById('deck-modal').classList.add('hidden');
        });

        document.getElementById('user-info').addEventListener('click', async () => {
            if (!user.id) return;
            const modal = document.getElementById('player-modal');
            document.getElementById('modal-username').textContent = user.username;
            document.getElementById('modal-avatar').src = user.avatar || '';
            if (dbClient) {
                const { data, error } = await dbClient.from('user_stats').select('wins, losses').eq('userId', user.id).single();
                if (!error) {
                    document.getElementById('modal-wins').textContent = data.wins || 0;
                    document.getElementById('modal-losses').textContent = data.losses || 0;
                } else {
                    document.getElementById('modal-wins').textContent = '0';
                    document.getElementById('modal-losses').textContent = '0';
                }
            }
            modal.classList.remove('hidden');
        });

        window.addEventListener('load', async () => {
            const urlParams = new URLSearchParams(window.location.search);
            const code = urlParams.get('code');
            if (code && !user.id) {
                try {
                    const response = await fetch('https://discord.com/api/oauth2/token', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({
                            client_id: CLIENT_ID,
                            client_secret: CLIENT_SECRET,
                            grant_type: 'authorization_code',
                            code,
                            redirect_uri: REDIRECT_URI
                        })
                    });
                    const tokenData = await response.json();
                    if (tokenData.access_token) {
                        const userResponse = await fetch('https://discord.com/api/users/@me', {
                            headers: { Authorization: `Bearer ${tokenData.access_token}` }
                        });
                        const userData = await userResponse.json();
                        user = {
                            id: userData.id,
                            username: userData.username,
                            avatar: userData.avatar ? `https://cdn.discordapp.com/avatars/${userData.id}/${userData.avatar}.png` : ''
                        };
                        localStorage.setItem('user', JSON.stringify(user));
                        if (dbClient) {
                            const { data } = await dbClient.from('user_credits').select('credits').eq('userId', user.id).single();
                            credits = data?.credits || 0;
                            localStorage.setItem('credits', credits);
                        }
                    }
                } catch (error) {
                    console.error('Error during OAuth:', error);
                }
                window.history.replaceState({}, document.title, window.location.pathname);
            }
            draftHistory = JSON.parse(localStorage.getItem('draftHistory') || '[]');
            currentDraftIndex = parseInt(localStorage.getItem('currentDraftIndex') || '-1');
            applyDraft();
            updateUserInfo();
            await loadUserCards();
        });
    </script>
</body>
</html>
